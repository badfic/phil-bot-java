{{> header}}
<div class="container-fluid">
    <div class="row">
        <!-- Video Player -->
        <div class="col-8 embed-responsive embed-responsive-16by9">
            <iframe
                src="{{hlsStreamLocation}}"
                title="The Swamp Live"
                referrerpolicy="origin"
                scrolling="no"
                allowfullscreen>
            </iframe>
        </div>

        <!-- Chat -->
        <div class="col-4" id="chatApp">
            <div class="alert alert-secondary">
                [[ status ]]
            </div>
            <ul id="messageArea" class="list-unstyled" style="max-height: 65vh; overflow:auto">
                <li v-for="message in messages" class="media my-4">
                    <img class="mr-3" :src="message.avatar" width=64 height=64 alt="Avatar">
                    <div class="media-body">
                        <h5 class="mt-0 mb-1">[[ message.sender ]]</h5>
                        [[ message.content ]]
                    </div>
                </li>
            </ul>
            <form id="messageForm" name="messageForm" nameForm="messageForm">
                <div class="form-group">
                    <div class="input-group clearfix">
                        <input type="text" width="100%" id="message" placeholder="Type a message..." autocomplete="off" class="form-control"/>
                        <button type="submit" class="primary">Send</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.1.4/sockjs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
<script>
    var chatApp = new Vue({
        el: '#chatApp',
        delimiters: ['[[', ']]'],
        data: {
            messages: [],
            status: "Connecting"
        },
        updated: function() {
            $("#messageArea").scrollTop($("#messageArea")[0].scrollHeight);
        }
    });

    var messageForm = document.querySelector('#messageForm');
    var messageInput = document.querySelector('#message');

    var stompClient = null;
    var username = '{{username}}';
    var userAvatar = '{{userAvatar}}';

    function connect() {
        var socket = new SockJS('/ws', null, {
            transports: ["xhr-streaming", "xhr-polling"]
        });
        stompClient = Stomp.over(socket);

        stompClient.connect({}, onConnected, onError);
    }

    function onConnected() {
        stompClient.subscribe('/topic/public', onMessageReceived);

        stompClient.send("/app/chat.addUser",
            {},
            JSON.stringify({sender: username, avatar: userAvatar, type: 'JOIN'})
        );

        chatApp.status = 'Connected!';
    }

    function onError(error) {
        chatApp.status = 'Could not connect to chat server. Please refresh this page to try again!';
    }

    function sendMessage(event) {
        var messageContent = messageInput.value.trim();

        if (messageContent && stompClient) {
            var chatMessage = {
                sender: username,
                avatar: userAvatar,
                content: messageInput.value,
                type: 'CHAT'
            };

            stompClient.send("/app/chat.sendMessage", {}, JSON.stringify(chatMessage));
            messageInput.value = '';
        }
        event.preventDefault();
    }

    function onMessageReceived(payload) {
        var inboundMessage = JSON.parse(payload.body);

        if (inboundMessage.type === 'JOIN') {
            chatApp.messages.push({
                sender: inboundMessage.sender,
                avatar: inboundMessage.avatar,
                content: ' just connected'
            });
        } else if (inboundMessage.type === 'LEAVE') {
            chatApp.messages.push({
                sender: inboundMessage.sender,
                avatar: inboundMessage.avatar,
                content: ' just disconnected'
            });
        } else {
            chatApp.messages.push({
                sender: inboundMessage.sender,
                avatar: inboundMessage.avatar,
                content: inboundMessage.content
            });
        }
    }

    messageForm.addEventListener('submit', sendMessage, true);
    connect();
</script>
{{> footer}}