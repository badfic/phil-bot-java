{{> members-header}}
<div class="container">
    <h1>Hunger Sim</h1>

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim">Home</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-pronouns">Pronouns</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" href="/members/hunger-sim-players">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-outcomes">Outcomes</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-rounds">Rounds</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-new-game">New Game</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-game">Run Game</a>
        </li>
    </ul>

    <div class="row">
        <div id="app">
            <form id="newPlayer">
                <div class="form-group">
                    <label for="discordId">Discord ID</label>
                    <input type="text" class="form-control" id="discordId">
                </div>
                <div class="form-group">
                    <label for="name">Name (Only if not a Discord User)</label>
                    <input type="text" class="form-control" id="name">
                </div>
                <div class="form-group">
                    <label for="pronoun">Pronouns</label>
                    <select class="form-control" id="pronoun" required>
                        <option v-for="pronoun in pronouns" :value="pronoun.id">[[ pronoun.subject ]] / [[ pronoun.object ]]</option>
                    </select>
                </div>

                <button type="submit" class="btn btn-dark mb-2">Save</button>
            </form>

            <div class="card" v-for="player in players">
                <div class="card-body">
                    <p>ID: [[ player.id ]]</p>
                    <p v-if="player.discordUser">Discord ID: [[ player.discordUser.id ]]</p>
                    <p v-if="player.discordUser">Effective Name: [[ player.effectiveName ]]</p>
                    <p v-if="player.name">Name: [[ player.name ]]</p>
                    <p>Pronouns: [[ player.pronoun.subject ]] / [[ player.pronoun.object ]]</p>
                    <form :id="player.id" class="deleteForm">
                        <button type="submit" class="btn btn-dark mb-2">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    const app = new Vue({
        el: "#app",
        delimiters: ["[[", "]]"],
        data: {
            pronouns: [],
            players: []
        },
        methods: {
            refresh: refreshMethod
        },
        updated: function() {
            document.querySelectorAll(".deleteForm").forEach(f => {
                f.addEventListener("submit", deleteSubmit);
            });
        },
        created: refreshMethod
    });

    function refreshMethod() {
        fetch("/members/hunger-sim/pronoun")
                .then(response => response.json())
                .then(result => app.pronouns = result);

        fetch("/members/hunger-sim/player")
                .then(response => response.json())
                .then(result => app.players = result);
    }

    function formSubmit(e) {
        e.preventDefault();

        const nameElement = document.querySelector("#name");
        const discordIdElement = document.querySelector("#discordId");
        const pronounElement = document.querySelector("#pronoun");

        if ((!nameElement.value && !discordIdElement.value) || (nameElement.value && discordIdElement.value)) {
            alert("Please provide either a Name or a Discord ID. At least one is required, but not both.");
            return;
        }

        const postData = {
            name: nameElement.value,
            discordId: discordIdElement.value,
            pronounId: pronounElement.value,
        };

        const request = new XMLHttpRequest();
        request.open("POST", "/members/hunger-sim/player", true);
        request.setRequestHeader("Content-Type", "application/json");

        request.onload = function() {
            console.log(this.response);

            if (this.status >= 200 && this.status <= 299) {
                app.refresh();
                nameElement.value = "";
                discordIdElement.value = "";
                alert("Player Saved!");
            } else {
                alert("ERROR: " + this.response);
            }
        };

        request.onerror = function() {
            alert("ERROR: Failed to save player. Could not contact server, phil might be down :(");
        };

        request.send(JSON.stringify(postData));
    }

    function deleteSubmit(e) {
        e.preventDefault();

        if (!confirm("Are you sure you want to delete?")) {
            return;
        }

        const idToDelete = e.target.id;

        const request = new XMLHttpRequest();
        request.open("DELETE", "/members/hunger-sim/player/" + idToDelete, true);

        request.onload = function() {
            console.log(this.response);

            if (this.status >= 200 && this.status <= 299) {
                app.refresh();
                alert("Player Deleted!");
            } else {
                alert("ERROR: " + this.response);
            }
        };

        request.onerror = function() {
            alert("ERROR: Failed to delete player. Could not contact server, phil might be down :(");
        };

        request.send();
    }

    document.querySelector("#newPlayer").addEventListener("submit", formSubmit);
</script>
{{> footer}}
