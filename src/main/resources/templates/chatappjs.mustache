<script>
    const username = "{{nickname}}";
    const userAvatar = "{{userAvatar}}";

    const chatApp = new Vue({
        el: "#chatApp",
        delimiters: ["[[", "]]"],
        data: {
            messages: [],
            onlineUsers: [],
            status: "Chat Connecting..."
        },
        updated: function() {
            const messageArea = document.querySelector("#messageArea");
            messageArea.scrollTop = messageArea.scrollHeight;
        }
    });

    const stompClient = new StompJs.Client({
        brokerURL: (window.location.protocol.includes("s") ? "wss://" : "ws://") + window.location.host + "/ws",
        debug: function(str) {
            console.log(str);
        },
        reconnectDelay: 4000,
        heartbeatIncoming: 4000,
        heartbeatOutgoing: 4000
    });

    stompClient.onConnect = function(frame) {
        stompClient.subscribe("/topic/public", onMessageReceived);
        stompClient.subscribe("/topic/online", onOnlineUsers);

        stompClient.publish({
            destination: "/app/chat.addUser",
            body: JSON.stringify({sender: username, avatar: userAvatar, type: "JOIN"})
        });

        chatApp.status = "Chat Connected!";
    };

    stompClient.onStompError = function(frame) {
        chatApp.status = "Chat Reconnecting...";
        console.log("Broker reported error: " + frame.headers["message"]);
        console.log("Additional error details: " + frame.body);
    };

    stompClient.onWebSocketClose = function(frame) {
        chatApp.status = "Chat Reconnecting...";
    };

    function onOnlineUsers(payload) {
        chatApp.onlineUsers = JSON.parse(payload.body);
    }

    function onMessageReceived(payload) {
        const inboundMessage = JSON.parse(payload.body);
        if (inboundMessage.type === "JOIN") {
            chatApp.messages.push({
                sender: inboundMessage.sender,
                avatar: inboundMessage.avatar,
                content: " just connected"
            });
        } else if (inboundMessage.type === "LEAVE") {
            chatApp.messages.push({
                sender: inboundMessage.sender,
                avatar: inboundMessage.avatar,
                content: " just disconnected"
            });
        } else {
            chatApp.messages.push({
                sender: inboundMessage.sender,
                avatar: inboundMessage.avatar,
                content: inboundMessage.content
            });
        }
    }

    function sendMessage(event) {
        const messageInput = document.querySelector("#message");
        const messageContent = messageInput.value.trim();
        if (messageContent) {
            const chatMessage = {
                sender: username,
                avatar: userAvatar,
                content: messageInput.value,
                type: "CHAT"
            };
            stompClient.publish({
                destination: "/app/chat.sendMessage",
                body: JSON.stringify(chatMessage)
            });
            messageInput.value = "";
        }
        event.preventDefault();
    }

    document.querySelector("#messageForm").addEventListener("submit", sendMessage);
    stompClient.activate();

    const emojiDiv = document.querySelector(".emoji-trigger");

    const emojiPicker = picmoPopup.createPopup({
        showVariants: false
    }, {
        referenceElement: emojiDiv,
        triggerElement: emojiDiv,
    });

    emojiPicker.addEventListener("emoji:select", event => {
        const messageInput = document.querySelector("#message");
        messageInput.value = messageInput.value + event.emoji;
    });

    emojiDiv.addEventListener("click", function(e) {
        emojiPicker.toggle();
        e.preventDefault();
    });
</script>
