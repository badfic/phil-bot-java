{{> members-header}}
<div class="container">
    <h1>Hunger Sim</h1>

    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim">Home</a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" href="/members/hunger-sim-pronouns">Pronouns</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-players">Players</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-outcomes">Outcomes</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-rounds">Rounds</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-new-game">New Game</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/members/hunger-sim-game">Run Game</a>
        </li>
    </ul>

    <div class="row">
        <div id="app">
            <form id="newPronoun">
                <div class="form-group">
                    <label for="subject">Subjective</label>
                    <input type="text" class="form-control" id="subject" required>
                </div>
                <div class="form-group">
                    <label for="object">Objective</label>
                    <input type="text" class="form-control" id="object" required>
                </div>
                <div class="form-group">
                    <label for="possessive">Possessive</label>
                    <input type="text" class="form-control" id="possessive" required>
                </div>
                <div class="form-group">
                    <label for="self">Self</label>
                    <input type="text" class="form-control" id="self" required>
                </div>

                <button type="submit" class="btn btn-dark mb-2">Save</button>
            </form>

            <div class="card" v-for="pronoun in pronouns">
                <div class="card-body">
                    <p>ID: [[ pronoun.id ]]</p>
                    <form>
                        <div class="form-group">
                            <label v-bind:for="'subject-' + pronoun.id">Subjective</label>
                            <input type="text" class="form-control" :id="'subject-' + pronoun.id" :value="pronoun.subject" required>
                        </div>
                        <div class="form-group">
                            <label v-bind:for="'object-' + pronoun.id">Objective</label>
                            <input type="text" class="form-control" :id="'object-' + pronoun.id" :value="pronoun.object" required>
                        </div>
                        <div class="form-group">
                            <label v-bind:for="'possessive-' + pronoun.id">Possessive</label>
                            <input type="text" class="form-control" :id="'possessive-' + pronoun.id" :value="pronoun.possessive" required>
                        </div>
                        <div class="form-group">
                            <label v-bind:for="'self-' + pronoun.id">Self</label>
                            <input type="text" class="form-control" :id="'self-' + pronoun.id" :value="pronoun.self" required>
                        </div>

                        <button :id="'editPronoun-' + pronoun.id" type="button" class="btn btn-dark mb-2 editForm">Save Edits</button>
                        <button :id="'deletePronoun-' + pronoun.id" type="button" class="btn btn-danger mb-2 deleteForm">Delete</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
    const app = new Vue({
        el: "#app",
        delimiters: ["[[", "]]"],
        data: {
            pronouns: []
        },
        methods: {
            refresh: refreshMethod
        },
        updated: function () {
            document.querySelectorAll(".deleteForm").forEach(f => {
                f.addEventListener("click", deleteSubmit);
            });

            document.querySelectorAll(".editForm").forEach(f => {
                f.addEventListener("click", editSubmit);
            });
        },
        created: refreshMethod
    });

    function refreshMethod() {
        fetch("/members/hunger-sim/pronoun")
                .then(response => response.json())
                .then(result => app.pronouns = result);
    }

    function formSubmit(e) {
        e.preventDefault();

        const postData = {
            subject: document.querySelector("#subject").value,
            object: document.querySelector("#object").value,
            possessive: document.querySelector("#possessive").value,
            self: document.querySelector("#self").value
        };

        fetch("/members/hunger-sim/pronoun", {
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=utf-8"
            },
            body: JSON.stringify(postData)
        })
        .then(response => {
            if (response.ok) {
                app.refresh();
            } else {
                alert(response.statusText + " Failed to save pronoun");
            }

            return response.text();
        })
        .then(responseText => console.log(responseText))
        .catch(result => alert(result));
    }

    function editSubmit(e) {
        e.preventDefault();

        const idToEdit = e.target.id.replace("editPronoun-", "");

        const postData = {
            subject: document.querySelector("#subject-" + idToEdit).value,
            object: document.querySelector("#object-" + idToEdit).value,
            possessive: document.querySelector("#possessive-" + idToEdit).value,
            self: document.querySelector("#self-" + idToEdit).value
        };

        fetch("/members/hunger-sim/pronoun/" + idToEdit, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json; charset=utf-8"
            },
            body: JSON.stringify(postData)
        })
        .then(response => {
            if (response.ok) {
                app.refresh();
            } else {
                alert("Failed to edit pronoun");
            }

            return response.text();
        })
        .then(responseText => console.log(responseText))
        .catch(result => alert(result));
    }

    function deleteSubmit(e) {
        e.preventDefault();

        if (!confirm("Are you sure you want to delete?")) {
            return;
        }

        const idToDelete = e.target.id.replace("deletePronoun-", "");

        fetch("/members/hunger-sim/pronoun/" + idToDelete, {
            method: "DELETE"
        })
        .then(response => {
            if (response.ok) {
                app.refresh();
            } else {
                alert(response.statusText + " Failed to delete pronoun");
            }

            return response.text();
        })
        .then(responseText => console.log(responseText))
        .catch(result => alert(result));
    }

    document.querySelector("#newPronoun").addEventListener("submit", formSubmit);
</script>
{{> footer}}
